# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/library/common/values.schema.json
app-template:
  controllers:
    main:
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        radarr:
          image:
            repository: ghcr.io/home-operations/radarr
            tag: 5.23.0.9907
          env:
            TZ: America/Vancouver
            # https://github.com/Radarr/Radarr/issues/7030#issuecomment-1039689518
            # https://github.com/dotnet/runtime/issues/9336
            COMPlus_EnableDiagnostics: "0"
            RADARR__INSTANCENAME: "{{ .Release.Name }}"
            RADARR__PORT: &port 80
            RADARR__LOG__LEVEL: info
            RADARR__AUTHENTICATION__METHOD: External
            RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
            RADARR__POSTGRES__PORT: "5432"
            RADARR__POSTGRES__HOST:
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-db-secret-{{.Release.Name}}"
                  key: HOST
            RADARR__POSTGRES__MAINDB: "{{.Release.Name}}_main"
            RADARR__POSTGRES__LOGDB: "{{.Release.Name}}_log"
            RADARR__POSTGRES__USER:
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-db-secret-{{.Release.Name}}"
                  key: LOGIN
            RADARR__POSTGRES__PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-db-secret-{{.Release.Name}}"
                  key: PASSWORD
          envFrom:
            - secretRef:
                name: "{{.Release.Name}}-secret"
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: *port
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          resources:
            limits: &resources
              memory: 1Gi
            requests:
              <<: *resources
              cpu: 10m
        exportarr:
          image:
            repository: ghcr.io/onedr0p/exportarr
            tag: v2.2.0
          args:
            - radarr
          env:
            PORT: 9707
            URL: http://localhost:80
            APIKEY:
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-secret"
                  key: RADARR__API_KEY
          resources:
            requests:
              cpu: 10m
            limits:
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
      pod:
        securityContext:
          runAsUser: 1026
          runAsGroup: 100
          runAsNonRoot: true
          fsGroup: 100
          fsGroupChangePolicy: OnRootMismatch
  service:
    main:
      controller: main
      ports:
        http:
          port: *port
        metrics:
          port: 9707
  serviceMonitor:
    main:
      enabled: true
      serviceName: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}'
      endpoints:
        - port: metrics
          scheme: http
          path: /metrics
          interval: 1m
          scrapeTimeout: 1m
  ingress:
    main:
      enabled: true
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Media Fetchers
        gethomepage.dev/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/radarr.png
        gethomepage.dev/name: '{{ .Release.Name | title | replace "-" " " }}'
      hosts:
        - host: &host "{{ .Release.Name }}.g4v.dev"
          paths:
            - path: /
              service:
                identifier: main
                port: http
  persistence:
    config:
      enabled: true
      type: persistentVolumeClaim
      storageClass: nas-apps
      accessMode: ReadWriteMany
      size: 10Gi
    tmp:
      enabled: true
      type: emptyDir
    torrents:
      type: nfs
      server: 172.16.10.10
      path: /volume1/Apps/torrents
      globalMounts:
        - path: /torrents
    nzbdownloads:
      type: nfs
      server: 172.16.10.10
      path: /volume1/Apps/nzbget
      globalMounts:
        - path: /nzb-downloads
    movies:
      type: nfs
      server: 172.16.10.10
      path: /volume1/Movies
      globalMounts:
        - path: /movies
    webseries-movies:
      type: nfs
      server: 172.16.10.10
      path: "/volume1/Webseries Movies"
      globalMounts:
        - path: /webseries-movies
    anime-movies:
      type: nfs
      server: 172.16.10.10
      path: "/volume1/Anime Movies"
      globalMounts:
        - path: /anime-movies
    comedian-specials:
      type: nfs
      server: 172.16.10.10
      path: "/volume1/Comedian Specials"
      globalMounts:
        - path: /comedian-specials
    downloads:
      type: nfs
      server: 172.16.10.10
      path: "/volume1/Downloads"
      globalMounts:
        - path: /downloads
