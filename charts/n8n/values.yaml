# yaml-language-server: $schema=../app-template.schema.json
app-template:
  controllers:
    main:
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        n8n:
          image:
            repository: ghcr.io/halkeye/docker-n8n
            tag: "1.70.1.13"
          env:
            TZ: America/Vancouver
            # no questions on login
            N8N_PERSONALIZATION_ENABLED: "false"
            # no version notifications, renovate will take care of it
            N8N_VERSION_NOTIFICATIONS_ENABLED: "false"
            # Public API
            N8N_PUBLIC_API_DISABLED: true
            N8N_PUBLIC_API_SWAGGERUI_DISABLED: true
            # User Management
            N8N_DIAGONISTICS_ENABLED: false
            N8N_HIRING_BANNER_ENABLED: false
            N8N_USER_MANAGEMENT_DISABLED: true
            # Metrics
            N8N_METRICS: true
            # Allow these node modules in code
            NODE_FUNCTION_ALLOW_EXTERNAL: databricks/sql,axios
            # Database
            DB_TYPE: postgresdb
            DB_POSTGRESDB_DATABASE:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-db-secret-{{ .Release.Name }}"
                  key: DATABASE_NAME
            DB_POSTGRESDB_HOST:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-db-secret-{{ .Release.Name }}"
                  key: HOST_NO_PORT
            DB_POSTGRESDB_PORT:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-db-secret-{{ .Release.Name }}"
                  key: PORT
            DB_POSTGRESDB_USER:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-db-secret-{{ .Release.Name }}"
                  key: LOGIN
            DB_POSTGRESDB_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-db-secret-{{ .Release.Name }}"
                  key: PASSWORD
            DB_POSTGRESDB_SSL_ENABLED: "true"
            DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false"
          envFrom:
            - secretRef:
                name: "{{.Release.Name}}-secret"
          resources:
            limits:
              memory: 4Gi
            requests:
              memory: 256Mi
              cpu: 100m
      pod:
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          fsGroup: 1000
          fsGroupChangePolicy: OnRootMismatch
  service:
    main:
      controller: main
      ports:
        http:
          port: 5678
  ingress:
    main:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: 'websecure'
        traefik.ingress.kubernetes.io/router.middlewares: 'traefik-ingress-authentik@kubernetescrd'
        nginx.ingress.kubernetes.io/server-snippet: real_ip_header CF-Connecting-IP;
        nginx.ingress.kubernetes.io/configuration-snippet: real_ip_header CF-Connecting-IP;
        nginx.ingress.kubernetes.io/auth-url: http://ak-outpost-nginx.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
        nginx.ingress.kubernetes.io/auth-signin: https://auth.g4v.dev/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
        nginx.ingress.kubernetes.io/auth-snippet: |
          proxy_set_header X-Forwarded-Host $http_host;
      hosts:
        - host: n8n.g4v.dev
          paths:
            - path: /
              service:
                identifier: main
                port: http
    webhooks:
      enabled: true
      hosts:
        - host: n8n.g4v.dev
          paths:
            - path: /webhook
              service:
                identifier: main
                port: http
            - path: /webhook-test
              service:
                identifier: main
                port: http
  persistence:
    config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 20Gi
      globalMounts:
        - path: /home/node/.n8n-old
    tmp:
      type: emptyDir
