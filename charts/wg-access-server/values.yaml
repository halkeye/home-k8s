app-template:
  appConfigs:
    sessionSecret: ""
    oidcClientID: ""
    oidcClientSecret: ""
    wireguardPrivateKey: ""

  podAnnotations:
    reloader.stakater.com/auto: "true"

  defaultPodOptions:
    dnsConfig:
      options:
        - name: ndots
          value: "1"
      nameservers:
        - 172.16.10.3

  controllers:
    main:
      containers:
        main:
          image:
            repository: ghcr.io/freifunkmuc/wg-access-server
            tag: v0.13.1
          env:
            TZ: America/Vancouver
            WG_CONFIG: /config/config.yaml
            WG_VPN_CIDRV6: 0
            WG_VPN_GATEWAY_INTERFACE: "eth0"
            WG_EXTERNAL_HOST: vpn.gavinmogan.com
            # WG_VPN_ALLOWED_IPS: 0.0.0.0/0, ::/0, 172.16.10.0/24
            WG_STORAGE:
              valueFrom:
                secretKeyRef:
                  name: "{{.Release.Name}}-db-secret-wg-access-server"
                  key: DB_URL
          envFrom:
            - secretRef:
                name: "{{.Release.Name}}-secret"
          securityContext:
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
              add:
                - NET_ADMIN           # perform various network-related operations
                - SYS_MODULE          # load and unload kernel modules
          resources:
            limits: &resources
              memory: 1Gi
            requests:
              <<: *resources
              cpu: 10m
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          runAsNonRoot: false
          fsGroup: 0
          fsGroupChangePolicy: OnRootMismatch

  service:
    main:
      controller: main
      ports:
        http:
          port: 8000
        https:
          port: 8443
    wireguard:
      enabled: true
      controller: main
      type: LoadBalancer
      loadBalancerIP: 172.16.10.203
      ports:
        wireguard:
          enabled: true
          protocol: UDP
          port: 51820

  ingress:
    main:
      enabled: true
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: VPN
        gethomepage.dev/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/wireguard.png
        gethomepage.dev/name: Wireguard
      hosts:
        - host: "admin-vpn.g4v.dev"
          paths:
            - path: /
              service:
                identifier: main
                port: http
      tls:
        - hosts:
            - admin-vpn.g4v.dev
          secretName: "wg-access-server-tls"

  persistence:
    config:
      enabled: true
      type: secret
      name: "{{ .Release.Name }}-secret"
    data:
      type: emptyDir
    certs:
      enabled: true
      type: secret
      secretName: "wg-access-server-tls"

  secrets:
    secret:
      # -- Enables or disables the Secret
      enabled: true
      # -- Labels to add to the Secret
      labels: {}
      # -- Annotations to add to the Secret
      annotations: {}
      # -- Secret stringData content. Helm template enabled.
      stringData:
        config.yaml: |-
          https:
            certFile: /certs/tls.crt
            keyFile: /certs/tls.key
          dns:
            enabled: true
            domain: dhcp.home
            upstream:
              - 172.16.10.3
          wireguard:
            privateKey: "{{ .Values.appConfigs.wireguardPrivateKey }}"
          # You can disable the builtin admin account by leaving out 'adminPassword'. Requires another backend to be configured.
          adminPassword: ""
          # adminUsername sets the user for the Basic/Simple Auth admin account if adminPassword is set.
          # Every user of the basic and simple backend with a username matching adminUsername will have admin privileges.
          adminUsername: "admin"
          # Configure zero or more authentication backends
          auth:
            sessionStore:
              # 32 random bytes in hexadecimal encoding (64 chars) used to sign session cookies. It's generated randomly
              # if not present. Need to be set when running in HA setup (more than one replica)
              secret: "{{ .Values.appConfigs.sessionSecret }}"
            oidc:
              # A name for the backend (is shown on the login page and possibly in the devices list of the 'all devices' admin page)
              name: "Auth"
              # Should point to the OIDC Issuer (excluding /.well-known/openid-configuration)
              issuer: "https://auth.g4v.dev/application/o/vpn/"
              # Your OIDC client credentials which would be provided by your OIDC provider
              clientID: "{{ .Values.appConfigs.oidcClientID }}"
              clientSecret: "{{ .Values.appConfigs.oidcClientSecret }}"
              # The full redirect URL
              # The path can be almost anything as long as it doesn't
              # conflict with a path that the web UI uses.
              # /callback is recommended.
              redirectURL: https://admin-vpn.g4v.dev/callback
              # List of scopes to request claims for. Must include 'openid'.
              # Must include 'email' if 'emailDomains' is used. Can include 'profile' to show the user's name in the UI.
              # Add custom ones if required for 'claimMapping'.
              # Defaults to ["openid"]
              scopes:
                - openid
                - profile
                - email
                - groups
              # You can optionally restrict access to users with an email address
              # that matches an allowed domain.
              # If empty or omitted then all email domains will be allowed.
              # emailDomains:
              #  - example.com
              # This is an advanced feature that allows you to define OIDC claim mapping expressions.
              # This feature is used to define wg-access-server admins based off a claim in your OIDC token.
              # A JSON-like object of claimKey: claimValue pairs as returned by the issuer is passed to the evaluation function.
              # See https://github.com/Knetic/govaluate/blob/9aa49832a739dcd78a5542ff189fb82c3e423116/MANUAL.md for the syntax.
              claimMapping:
                admin: "'WireguardAdmins' in groups"
                  #  access: "'WireguardAccess' in group_membership"
              # Let wg-access-server retrieve the claims from the ID Token instead of querying the UserInfo endpoint.
              # Some OIDC authorization provider implementations (e.g. ADFS) only publish claims in the ID Token.
              claimsFromIDToken: false
              # require this claim to be "true" to allow access for the user
              # accessClaim: "access"
