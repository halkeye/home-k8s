app-template:
  controllers:
    main:
      strategy: Recreate
      pod:
        securityContext:
          runAsUser: 5050
          runAsGroup: 5050
          fsGroup: 5050
          fsGroupChangePolicy: OnRootMismatch
      containers:
        pgadmin4:
          image:
            repository: dpage/pgadmin4
            tag: 8.11@sha256:822dd7a1fa68601f70b3e06445c9cb52b134862b0c43f0f7a96ab6ac44a592a4
          env:
            TZ: America/Vancouver
            LOG_LEVEL: "info"
            PGADMIN_SERVER_JSON_FILE: "/config/servers.json"
          envFrom:
            - secretRef:
                name: "{{.Release.Name}}-secret"
          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop: ["ALL"]
              # https://stackoverflow.com/questions/68231806/sh-python3-operation-not-permitted-kubernetes
              # The culprit is this: https://github.com/postgres/pgadmin4/blob/master/Dockerfile#L190setcap
              # setcap CAP_NET_BIND_SERVICE=+eip /usr/bin/python3.8
              # Either allow NET_BIND_SERVICE for your pod, or build a custom container where you remove this capability from /usr/bin/python3.8.
              add: ["NET_BIND_SERVICE"]
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 100Mi
              cpu: 15m
  service:
    main:
      controller: main
      ports:
        http:
          port: 80
  ingress:
    main:
      enabled: true
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Kubernetes
        gethomepage.dev/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/pgadmin4.png
        gethomepage.dev/name: Postgres
      hosts:
        - host: pgadmin4.g4v.dev
          paths:
            - path: /
              service:
                identifier: main
                port: http
  persistence:
    config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      storageClass: synology-iscsi
      globalMounts:
        - path: /var/lib/pgadmin
    configmap:
      enabled: true
      type: configMap
      name: "{{ .Release.Name }}-config"
      globalMounts:
        - path: /config
          readOnly: true
        - path: /pgadmin4/config_local.py
          subPath: config_local.py
          readOnly: true
    superuserpass:
      enabled: true
      type: secret
      name: postgres-superuser
      globalMounts:
        - path: /secrets/pgpassfile
          readOnly: true
          subPath: password
  configMaps:
    config:
      data:
        config_local.py: |-
          import os

          clientId = os.path.expandvars('$PGADMIN_OIDC_CLIENT_ID')
          clientSecret = os.path.expandvars('$PGADMIN_OIDC_CLIENT_SECRET')

          OAUTH2_CONFIG = [
              {
                  'OAUTH2_NAME': 'oidc',
                  'OAUTH2_DISPLAY_NAME': 'G4V',
                  'OAUTH2_CLIENT_ID': clientId,
                  'OAUTH2_CLIENT_SECRET': clientSecret,
                  'OAUTH2_TOKEN_URL': os.environ["PGADMIN_OIDC_TOKEN_URL"],
                  'OAUTH2_AUTHORIZATION_URL': os.environ["PGADMIN_OIDC_AUTHORIZATION_URL"],
                  'OAUTH2_USERINFO_ENDPOINT': os.environ["PGADMIN_OIDC_USERINFO_URL"],
                  'OAUTH2_LOGOUT_URL': os.environ["PGADMIN_OIDC_LOGOUT_URL"],
                  'OAUTH2_SCOPE': 'openid email profile',
                  'OAUTH2_ICON': 'fa-lock',
                  'OAUTH2_BUTTON_COLOR': '#000000'
              }
          ]
        servers.json: |-
          {
            "Servers": {
                "1": {
                    "Name": "postgres-rw",
                    "Group": "home",
                    "Port": 5432,
                    "Username": "postgres",
                    "PassFile": "/secrets/pgpassfile",
                    "Host": "postgres-rw.db",
                    "SSLMode": "prefer",
                    "MaintenanceDB": "postgres"
                }
            }
          }

