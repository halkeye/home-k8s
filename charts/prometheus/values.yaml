kube-prometheus-stack:
  prometheus-node-exporter:
    tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
  alertmanager:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme-letsencrypt-prod
        hajimari.io/appName: "Alert Manager"
        hajimari.io/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/alertmanager.png
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Kubernetes
        gethomepage.dev/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/alertmanager.png
        gethomepage.dev/name: Alert Manager
      hosts:
        - alertmanager.h.g4v.dev
      tls:
        - secretName: alertmanager-tls-certificate
          hosts:
            - alertmanager.h.g4v.dev
    config:
      receivers:
        - name: 'null'
        - name: 'discord'
          slack_configs:
          - channel: '#prometheus'
            icon_url: https://avatars3.githubusercontent.com/u/3380462
            username: 'Prometheus'
            send_resolved: true
            # https://github.com/onedr0p/home-cluster/blob/main/cluster/apps/monitoring/kube-prometheus-stack/helm-release.yaml#L33
            title: |-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
            text: >-
              {{ range .Alerts -}}
                **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} `{{ .Labels.severity }}`{{ end }}
              {{ if ne .Annotations.summary ""}}**Summary:** {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}**Message:** {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}**Description:** {{ .Annotations.description }}{{ end }}
                **Details:**
                {{ range .Labels.SortedPairs }} â€¢ {{ .Name }}: `{{ .Value }}`
                {{ end }}
              {{ end }}
      route:
        group_by: ['alertname', 'job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 6h
        receiver: 'discord'
        routes:
        - receiver: 'null'
          matchers:
          - severity =~ "none"
        - receiver: 'discord'
  prometheus:
    prometheusSpec:
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
    extraScrapeConfigs: |-
      - job_name: nut-synology
        scheme: https
        metrics_path: /ups_metrics
        static_configs:
        - targets: ['nut-exporter.nas.g4v.dev']
      - job_name: nut-exporter
        scheme: https
        metrics_path: /metrics
        static_configs:
        - targets: ['nut-exporter.nas.g4v.dev']
      - job_name: qbittorrent
        scheme: https
        metrics_path: /metrics
        static_configs:
        - targets: ['qbittorrent-exporter.nas.g4v.dev']
      - job_name: nzbget
        scheme: https
        metrics_path: /metrics
        static_configs:
        - targets: ['nzbget-exporter.nas.g4v.dev']
      - job_name: plex
        scheme: https
        metrics_path: /metrics
        static_configs:
        - targets: ['plex-exporter.nas.g4v.dev']
      - job_name: adguard
        scheme: https
        metrics_path: /metrics
        static_configs:
        - targets: ['adguard-exporter.nas.g4v.dev']
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme-letsencrypt-prod
        hajimari.io/appName: Prometheus
        hajimari.io/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/prometheus.png
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Kubernetes
        gethomepage.dev/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/prometheus.png
        gethomepage.dev/name: Prometheus
      hosts:
        - prometheus.h.g4v.dev
      tls:
        - secretName: prometheus-tls-certificate
          hosts:
            - prometheus.h.g4v.dev
  grafana:
    enabled: true
    podAnnotations:
      reloader.stakater.com/auto: "true"
    ingress:
      enabled: true
      annotations:
        hajimari.io/appName: Grafana
        hajimari.io/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/grafana.png
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Kubernetes
        gethomepage.dev/icon: https://raw.githubusercontent.com/walkxcode/dashboard-icons/master/png/grafana.png
        gethomepage.dev/name: Grafana
      hosts:
        - grafana.h.g4v.dev
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: "default"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    plugins:
      - grafana-clock-panel
      - grafana-piechart-panel
      - grafana-worldmap-panel
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - vonage-status-panel
    dashboards:
      default:
        minio:
          # renovate: depName="MinIO Dashboard"
          gnetId: 13502
          revision: 25
          datasource:
            - name: DS_PROMETHEUS
              value: Prometheus
        node-exporter-full:
          # renovate: depName="Node Exporter Full"
          gnetId: 1860
          revision: 33
          datasource: Prometheus
        node-feature-discovery:
          url: https://raw.githubusercontent.com/kubernetes-sigs/node-feature-discovery/master/examples/grafana-dashboard.json
          datasource: Prometheus
        kubernetes-api-server:
          # renovate: depName="Kubernetes / System / API Server"
          gnetId: 16761
          revision: 16
          datasource: Prometheus
        kubernetes-coredns:
          # renovate: depName="Kubernetes / System / CoreDNS"
          gnetId: 15762
          revision: 17
          datasource: Prometheus
        kubernetes-global:
          # renovate: depName="Kubernetes / Views / Global"
          gnetId: 15757
          revision: 37
          datasource: Prometheus
        kubernetes-namespaces:
          # renovate: depName="Kubernetes / Views / Namespaces"
          gnetId: 15758
          revision: 34
          datasource: Prometheus
        kubernetes-nodes:
          # renovate: depName="Kubernetes / Views / Nodes"
          gnetId: 15759
          revision: 29
          datasource: Prometheus
        kubernetes-pods:
          # renovate: depName="Kubernetes / Views / Pods"
          gNetId: 15760
          revision: 21
          datasource: Prometheus
        kubernetes-volumes:
          # renovate: depName="K8s / Storage / Volumes / Cluster"
          gnetId: 11454
          revision: 14
          datasource: Prometheus
        prometheus:
          gnetId: 3662
          revision: 2
          datasource: Prometheus
        kubernetes-cluster-monitoring-315:
          gnetId: 315
          revision: 3
          datasource: Prometheus
        kubernetes-capacity:
          gnetId: 5228
          revision: 6
          datasource: Prometheus
        kubernetes-node-resource-consumption:
          gnetId: 8739
          revision: 3
          datasource: Prometheus
        kubernetes-cluster:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
        cluster-health:
          gnetId: 10000
          revision: 1
          datasource: Prometheus
        cert-manager:
          gnetId: 11001
          revision: 1
          datasource: Prometheus
        nut:
          gnetId: 14371
          revision: 1
          datasource: Prometheus
        kube-state-metrics-v2:
          gnetId: 13332
          revision: 12
          datasource: Prometheus
        alertmanager:
          gnetId: 9578
          revision: 4
          datasource: Prometheus
        go-processes:
          gnetId: 6671
          revision: 2
          datasource: Prometheus
        go-metrics:
          gnetId: 10826
          revision: 1
          datasource: Prometheus
        traefik:
          gnetId: 4475
          revision: 5
          datasource: Prometheus
        radarr:
          gnetId: 12896
          revision: 1
          datasource: Prometheus
        sonarr:
          gnetId: 12530
          revision: 1
          datasource: Prometheus
        adguard:
          gnetId: 13330
          revision: 3
          datasource: Prometheus
        exportarr:
          url: https://raw.githubusercontent.com/onedr0p/exportarr/master/examples/grafana/dashboard2.json
          token: ''
    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
      datasources:
        enabled: true
        searchNamespace: ALL
    env:
      GF_DEFAULT_INSTANCE_NAME: grafana-home
      GF_SERVER_ROOT_URL: https://grafana.h.g4v.dev
      GF_EXPLORE_ENABLED: true
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: natel-discrete-panel,pr0ps-trackmap-panel,panodata-map-panel
    envFromSecret: grafana-secrets
    grafana.ini:
      analytics:
        check_for_updates: false
        check_for_plugin_updates: false
        reporting_enabled: false
      auth:
        signout_redirect_url: https://auth.g4v.dev/application/o/grafana/end-session/
        oauth_auto_login: false
        oauth_allow_insecure_email_lookup: true
      auth.anonymous:
        enabled: true
        org_name: Main Org.
        org_role: Viewer
        hide_version: true
      auth.generic_oauth:
        name: authentik
        enabled: true
        scopes: openid email profile
        auth_url: https://auth.g4v.dev/application/o/authorize/
        token_url: https://auth.g4v.dev/application/o/token/
        api_url: https://auth.g4v.dev/application/o/userinfo/
        # Optionally map user groups to Grafana roles
        role_attribute_path: contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'
  kubeProxy:
    enabled: false
  defaultRules:
    rules:
      kubeControllerManager: false
      kubeProxy: false
      kubeSchedulerAlerting: false
      kubeSchedulerRecording: false
  prometheusOperator:
    kubeletService:
      name: kubelet
      enabled: false
