-- udp/tcp dns listening
setLocal("0.0.0.0:53", {})

addDOHLocal('0.0.0.0', '/certs/tls.crt', '/certs/tls.key', "/dns-query", {customResponseHeaders={["alt-svc"]="h3=\":443\""}})
addDOH3Local('0.0.0.0', '/certs/tls.crt', '/certs/tls.key')
addDOQLocal('0.0.0.0', '/certs/tls.crt', '/certs/tls.key')
addDNSCryptBind("0.0.0.0:8443", "2.providername", '/certs/tls.crt', '/certs/tls.key')
addTLSLocal('0.0.0.0', '/certs/tls.crt', '/certs/tls.key')

-- disable security status polling via DNS
setSecurityPollSuffix("")

-- technitium
newServer("172.16.10.3")

-- Enable caching
pc = newPacketCache(10000, {
  maxTTL = 86400,
  minTTL = 0,
  temporaryFailureTTL = 60,
  staleTTL = 60,
  dontAge = false
})
getPool(""):setCache(pc)

-- Request logging, uncomment to log DNS requests/responses to stdout
addAction(AllRule(), LogAction("", false, false, true, false, false))
addResponseAction(AllRule(), LogResponseAction("", false, true, false, false))

local svc = { newSVCRecordParameters(1, "dnsdist.g4v.dev.", { mandatory={"port"}, alpn={ "dot" }, noDefaultAlpn=true, port=853, ipv4hint={ "172.16.10.205" } }),
              newSVCRecordParameters(2, "dnsdist.g4v.dev.", { mandatory={"port"}, alpn={ "h2", "h3" }, port=443, ipv4hint={ "172.16.10.205" }, key7 = "/dns-query{?dns}" })
            }
addAction(AndRule{QTypeRule(64), QNameRule('_dns.resolver.arpa.')}, SpoofSVCAction(svc))
-- reply with NODATA (NXDOMAIN would deny all types at that name and below, including SVC) for other types
addAction(QNameRule('_dns.resolver.arpa.'), NegativeAndSOAAction(false, '_dns.resolver.arpa.', 3600, 'fake.resolver.arpa.', 'fake.resolver.arpa.', 1, 1800, 900, 604800, 86400))
