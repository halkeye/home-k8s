argo-cd:
  global:
    domain: argocd.h.g4v.dev
    image:
      repository: ghcr.io/halkeye/docker-argocd
      tag: "v2.13.0.8"
  fullnameOverride: argocd
  createClusterRoles: true
  createAggregateRoles: true
  notifications:
    argocdUrl: &url https://argocd.h.g4v.dev
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  controller:
    clusterAdminAccess: true
    metrics:
      enabled: true
      rules:
        enabled: true
        spec:
         - alert: ArgoAppMissing
           expr: |
             absent(argocd_app_info) == 1
           for: 15m
           labels:
             severity: critical
           annotations:
             summary: "[Argo CD] No reported applications"
             description: >
               Argo CD has not reported any applications data for the past 15 minutes which
               means that it must be down or not functioning properly.  This needs to be
               resolved for this cloud to continue to maintain state.
         - alert: ArgoAppNotSynced
           expr: |
             argocd_app_info{sync_status!="Synced"} == 1
           for: 12h
           labels:
             severity: warning
           annotations:
             summary: "[`{{$labels.name}}`] Application not synchronized"
             description: >
               The application [`{{$labels.name}}`] has not been synchronized for over
               12 hours which means that the state of this cloud has drifted away from the
               state inside Git.
      serviceMonitor:
        enabled: true
  dex:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  applicationSet:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    ingress:
      enabled: true
      ingressClassName: ""
      annotations:
        gethomepage.dev/enabled: 'false'
      hostname: argocd-webhooks.g4v.dev
  server:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme-letsencrypt-prod
      hostname: argocd.h.g4v.dev
    configManagementPlugins: |
      - name: sops
        init:
          command: ["/bin/sh", "-c"]
          args: ["if [ -f 'secrets.enc' ]; then echo '---' > secrets.yaml && sops -d --input-type yaml --output-type yaml secrets.enc >> secrets.yaml; fi"]
        generate:
          command: ["/bin/sh", "-c"]
          args: ["cat *.yaml | yq"]
  repoServer:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    volumes:
      - name: sops-key
        secret:
          secretName: argocd-secret
    volumeMounts:
      - mountPath: /helm-secrets-private-keys/key.txt
        name: sops-key
        subPath: sops.key.txt
    env:
      - name: SOPS_AGE_KEY_FILE  # For age
        value: /helm-secrets-private-keys/key.txt
  configs:
    repositories:
      github:
        type: git
        url: https://github.com/halkeye/home-k8s
        name: halkeye-home-k8s
    rbac:
      policy.csv: g, ArgoCD Admins, role:admin
      policy.default: role:readonly
    params:
      server.insecure: "true"
    cm:
      exec.enabled: false
      admin.enabled: "true"
      resource.customizations: |
        operators.coreos.com/Subscription:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.state ~= nil then
                if obj.status.state == "AtLatestKnown" then
                  hs.message = obj.status.state .. " - " .. obj.status.currentCSV
                  hs.status = "Healthy"
                end
              end
            end
            return hs
      helm.valuesFileSchemes: secrets+gpg-import, secrets+gpg-import-kubernetes, secrets+age-import,
        secrets+age-import-kubernetes, secrets,secrets+literal, https
      kustomize.buildOptions: --enable-alpha-plugins --enable-exec
      url: *url
      dex.config: |
        connectors:
          # OIDC
          - type: oidc
            id: Auth
            name: Auth
            config:
              issuer: https://auth.g4v.dev/application/o/argocd/
              clientID: zP5xeL7aYlacy7HSN9c7q63k964G47nz0cPEN3mW
              clientSecret: $dex.authentik.clientSecret
              allowedAudiences:
                - zP5xeL7aYlacy7HSN9c7q63k964G47nz0cPEN3mW
                - argo-cd-cli
                - argo-cd
              insecureEnableGroups: true
              scopes:
                - openid
                - profile
                - email
                - groups
