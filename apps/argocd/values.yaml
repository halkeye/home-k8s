argo-cd:
  notifications:
    argocdUrl: &url https://argocd.h.g4v.dev
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  controller:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  dex:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  applicationSet:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    webhook:
      ingress:
        enabled: true
        ingressClassName: cloudflare-tunnel
        annotations:
          hajimari.io/enable: 'false'
          gethomepage.dev/enabled: 'false'
        hosts:
          - &webhookhost argocd-webhooks.g4v.dev
  server:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme-letsencrypt-prod
        hajimari.io/appName: "ArgoCD"
        hajimari.io/icon: "robot"
      hosts:
        - &host argocd.h.g4v.dev
        - argocd.172.16.10.5.nip.io
      tls:
        - secretName: argocd-tls-certificate
          hosts:
            - *host
    config:
      statusbadge.enabled: 'true'
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    configManagementPlugins: |
      - name: sops
        init:
          command: ["/bin/sh", "-c"]
          args: ["if [ -f 'secrets.enc' ]; then echo '---' > secrets.yaml && sops -d --input-type yaml --output-type yaml secrets.enc >> secrets.yaml; fi"]
        generate:
          command: ["/bin/sh", "-c"]
          args: ["cat *.yaml | yq"]
  repoServer:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    volumes:
      - name: custom-tools
        emptyDir: {}
      - name: helm-secrets-private-keys
        secret:
          secretName: helm-secrets-private-keys
    volumeMounts:
      - mountPath: /usr/local/bin/sops
        name: custom-tools
        subPath: sops
      - mountPath: /usr/local/bin/jq
        name: custom-tools
        subPath: jq
      - mountPath: /usr/local/bin/yq
        name: custom-tools
        subPath: yq
      - mountPath: /usr/local/sbin/helm
        subPath: helm
        name: custom-tools
      - mountPath: /helm-secrets-private-keys/
        name: helm-secrets-private-keys
      - mountPath: /custom-tools/
        name: custom-tools
    env:
      - name: HELM_PLUGINS
        value: /custom-tools/helm-plugins/
      - name: HELM_SECRETS_CURL_PATH
        value: /custom-tools/curl
      - name: HELM_SECRETS_SOPS_PATH
        value: /custom-tools/sops
      - name: HELM_SECRETS_VALS_PATH
        value: /custom-tools/vals
      - name: HELM_SECRETS_KUBECTL_PATH
        value: /custom-tools/kubectl
      - name: HELM_SECRETS_BACKEND
        value: sops
      # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
      - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
        value: "true"
      - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
        value: "false"
      - name: HELM_SECRETS_WRAPPER_ENABLED
        value: "true"
      - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
        value: "true"
      - name: HELM_SECRETS_HELM_PATH
        value: /usr/local/bin/helm
      - name: SOPS_AGE_KEY_FILE # For age
        value: /helm-secrets-private-keys/key.txt
    initContainers:
      - name: custom-tools
        image: alpine:3.19
        command: ["/bin/sh", "-c"]
        env:
          - name: HELM_SECRETS_VERSION
            value: "4.5.1"
          - name: KUBECTL_VERSION
            value: "1.28.5"
          - name: VALS_VERSION
            value: "0.24.0"
          - name: SOPS_VERSION
            value: "3.8.1"
          - name: JQ_VERSION
            value: "1.6"
        args:
          - |
            mkdir -p /custom-tools/helm-plugins

            wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;
            wget -qO- https://github.com/helmfile/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_amd64.tar.gz | tar -xzf- -C /custom-tools/ vals;

            wget -qO /custom-tools/curl https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64;
            wget -qO /custom-tools/sops https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64;
            wget -qO /custom-tools/jq https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64;
            wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl;
            wget -qO /custom-tools/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64;

            cp /custom-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh /custom-tools/helm;

            chmod a+x /custom-tools/sops;
            chmod a+x /custom-tools/jq;
            chmod a+x /custom-tools/yq;
            chmod a+x /custom-tools/curl;
            chmod a+x /custom-tools/kubectl;
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
  configs:
    repositories:
      github:
        type: git
        url: https://github.com/halkeye/home-k8s
        name: halkeye-home-k8s
    rbac:
      policy.csv: g, ArgoCD Admins, role:admin
      policy.default: role:readonly
    params:
      server.insecure: "true"
    cm:
      exec.enabled: true
      admin.enabled: "true"
      helm.valuesFileSchemes: secrets+gpg-import, secrets+gpg-import-kubernetes, secrets+age-import,
        secrets+age-import-kubernetes, secrets,secrets+literal, https
      kustomize.buildOptions: --enable-alpha-plugins --enable-exec
      url: *url 
      dex.config: |
        connectors:
          # OIDC
          - type: oidc
            id: Auth
            name: Auth
            config:
              issuer: https://auth.g4v.dev/application/o/argocd/
              clientID: zP5xeL7aYlacy7HSN9c7q63k964G47nz0cPEN3mW
              clientSecret: $dex.authentik.clientSecret
              allowedAudiences:
                - zP5xeL7aYlacy7HSN9c7q63k964G47nz0cPEN3mW
                - argo-cd-cli
                - argo-cd
              insecureEnableGroups: true
              scopes:
                - openid
                - profile
                - email
                - groups
